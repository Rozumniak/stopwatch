{"version":3,"sources":["Components/Timer.js","Components/Buttons.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","time","isActive","isPaused","setTime","React","useEffect","interval","setInterval","clearInterval","className","Math","floor","slice","Buttons","handleReset","toggleStart","doubleClick","ButtonGroup","onClick","StopWatch","useState","setIsActive","setIsPaused","isPauseClicked","setPauseClicked","clickTime","setClickTime","active","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAoCeA,EAjCD,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QAetC,OAdAC,IAAMC,WAAU,WACZ,IAAIC,EAAW,KASf,OAPIL,IAAyB,IAAbC,EACZI,EAAWC,aAAY,WACnBJ,GAAQ,SAACH,GAAD,OAAUA,EAAO,QAC1B,IAEHQ,cAAcF,GAEX,WACHE,cAAcF,MAEnB,CAACL,EAAUC,IAEV,sBAAKO,UAAW,qBAAhB,UACI,uBAAMA,UAAU,SAAhB,WACF,IAAMC,KAAKC,MAAOX,EAAO,KAAW,KAAKY,OAAO,GAD9C,OAGA,uBAAMH,UAAU,SAAhB,WACF,IAAMC,KAAKC,MAAOX,EAAO,IAAS,KAAKY,OAAO,GAD5C,OAGA,uBAAMH,UAAU,SAAhB,WACF,IAAMC,KAAKC,MAAOX,EAAO,IAAQ,KAAKY,OAAO,GAD3C,OAGA,sBAAMH,UAAU,kBAAhB,UACF,IAAQT,EAAO,GAAM,KAAMY,OAAO,SCJ7BC,G,MAvBC,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAClCC,EACF,sBAAKR,UAAW,cAAhB,UACI,uBAAOA,UAAW,SAAUS,QAASH,EAArC,wBAGA,uBAAON,UAAW,SAAUS,QAASF,EAArC,kBAGA,uBAAOP,UAAW,SAAUS,QAASJ,EAArC,sBAOR,OACI,qBAAKL,UAAW,qBAAhB,SACKQ,MCkEEE,EAlFG,WAAO,IAAD,EACYC,oBAAS,GADrB,mBACbnB,EADa,KACHoB,EADG,OAEYD,oBAAS,GAFrB,mBAEblB,EAFa,KAEHoB,EAFG,OAGIF,mBAAS,GAHb,mBAGbpB,EAHa,KAGPG,EAHO,OAgCsBiB,oBAAS,GAhC/B,mBAgCbG,EAhCa,KAgCGC,EAhCH,OAiCcJ,mBAAS,GAjCvB,mBAiCbK,EAjCa,KAiCFC,EAjCE,KAmCpBtB,IAAMC,WAAU,WACZ,IAAIC,EAAW,KASf,OAPuB,IAAnBiB,EACAjB,EAAWC,aAAY,WACnBmB,GAAa,SAACD,GAAD,OAAeA,EAAY,QACzC,IAEHjB,cAAcF,GAEX,WACHE,cAAcF,MAEnB,CAACiB,IAeJ,OACI,qBAAKd,UAAW,UAAhB,SACI,qBAAKA,UAAW,UAAhB,SACI,sBAAKA,UAAW,YAAhB,UACI,cAAC,EAAD,CAAOT,KAAMA,EAAMC,SAAUA,EAAUC,SAAUA,EAAUC,QAASA,IAEpE,cAAC,EAAD,CACIwB,OAAQ1B,EACRC,SAAUA,EACVY,YApDA,WAChBX,EAAQ,IAoDQY,YAlDA,YACC,IAAbd,IAAkC,IAAbC,GAZzBmB,GAAY,GACZC,GAAY,GACZnB,EAAQ,KANRkB,GAAY,GACZC,GAAY,KAiEIN,YAzBA,WACfQ,GAAgB,GACbC,EAAY,KACZC,EAAa,GACbF,GAAgB,IACXC,GAAW,KAAOF,IArC3BD,GAAY,GAuCRE,GAAgB,GAChBE,EAAa,eClDVE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5347fbd0.chunk.js","sourcesContent":["import './Timer.css';\r\nimport React from 'react';\r\n\r\nconst Timer = ({time, isActive, isPaused, setTime}) => {\r\n    React.useEffect(() => {\r\n        let interval = null;\r\n\r\n        if (isActive && isPaused === false) {\r\n            interval = setInterval(() => {\r\n                setTime((time) => time + 10);\r\n            }, 10);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [isActive, isPaused]);\r\n    return (\r\n        <div className={\"stopWatch__numbers\"}>\r\n            <span className=\"digits\">\r\n        {(\"0\" + Math.floor((time / 3600000) % 60)).slice(-2)}:\r\n            </span>\r\n            <span className=\"digits\">\r\n        {(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:\r\n            </span>\r\n            <span className=\"digits\">\r\n        {(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}.\r\n            </span>\r\n            <span className=\"digits mili-sec\">\r\n        {(\"0\" + ((time / 10) % 100)).slice(-2)}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","import './Buttons.css';\r\nimport React from 'react';\r\n\r\nconst Buttons = ({handleReset, toggleStart, doubleClick}) => {\r\n    const ButtonGroup = (\r\n        <div className={\"buttonGroup\"}>\r\n            <label className={\"button\"} onClick={toggleStart}>\r\n                Start/Stop\r\n            </label>\r\n            <label className={\"button\"} onClick={doubleClick}>\r\n                Wait\r\n            </label>\r\n            <label className={\"button\"} onClick={handleReset}>\r\n                Reset\r\n            </label>\r\n        </div>\r\n    );\r\n\r\n\r\n    return (\r\n        <div className={\"stopWatch__buttons\"}>\r\n            {ButtonGroup}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import './App.css';\nimport React, {useState} from 'react';\nimport Timer from \"./Components/Timer\";\nimport Buttons from \"./Components/Buttons\";\n\nconst StopWatch = () => {\n    const [isActive, setIsActive] = useState(false);\n    const [isPaused, setIsPaused] = useState(true);\n    const [time, setTime] = useState(0);\n\n\n\n    const handleStart = () => {\n        setIsActive(true);\n        setIsPaused(false);\n    };\n    const handleStop = () =>{\n        setIsActive(false);\n        setIsPaused(true)\n        setTime(0);\n    }\n    const handlePauseResume = () => {\n        setIsPaused(true);\n    };\n\n    const handleReset = () => {\n        setTime(0);\n    };\n    const toggleStart = () =>{\n        if (isActive === true && isPaused === false){\n            handleStop()\n        }\n        else {\n            handleStart()\n        }\n    }\n\n    const [isPauseClicked, setPauseClicked] = useState(false);\n    const [clickTime, setClickTime] = useState(0);\n\n    React.useEffect(() => {\n        let interval = null;\n\n        if (isPauseClicked === true) {\n            interval = setInterval(() => {\n                setClickTime((clickTime) => clickTime + 10);\n            }, 10);\n            } else {\n            clearInterval(interval);\n        }\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isPauseClicked]);\n    const doubleClick = () =>{\n         setPauseClicked(true)\n        if (clickTime > 300){\n            setClickTime(0)\n            setPauseClicked(false)\n        }else if(clickTime<=300 && isPauseClicked){\n            handlePauseResume()\n            setPauseClicked(false)\n            setClickTime(0)\n        }\n\n    }\n\n\n    return (\n        <div className={\"wrapper\"}>\n            <div className={\"content\"}>\n                <div className={\"stopWatch\"}>\n                    <Timer time={time} isActive={isActive} isPaused={isPaused} setTime={setTime}/>\n\n                    <Buttons\n                        active={isActive}\n                        isPaused={isPaused}\n                        handleReset={handleReset}\n                        toggleStart={toggleStart}\n                        doubleClick={doubleClick}\n                    />\n                </div>\n            </div>\n\n        </div>);\n}\n\nexport default StopWatch;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}