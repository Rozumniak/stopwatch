{"version":3,"sources":["Components/Timer.js","Components/Buttons.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","timer","className","Math","floor","slice","Buttons","handleReset","toggleStart","doubleClick","ButtonGroup","onClick","StopWatch","useState","setTimer","diff","setDiff","subscription","setSubscription","prevent","setPrevent","unsubscribe","timerSubscription","interval","subscribe","v","pipe","map","event","timerInstance","setTimeout","clearTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAqBeA,EAjBD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEZ,OACI,sBAAKC,UAAW,qBAAhB,UACI,uBAAMA,UAAU,SAAhB,WACF,IAAMC,KAAKC,MAAOH,EAAQ,KAAQ,KAAKI,OAAO,GAD5C,OAGA,uBAAMH,UAAU,SAAhB,WACF,IAAMC,KAAKC,MAAOH,EAAQ,GAAM,KAAKI,OAAO,GAD1C,OAGA,uBAAMH,UAAU,SAAhB,WACF,IAAMC,KAAKC,MAAMH,EAAS,KAAKI,OAAO,GADpC,W,gBCYGC,G,YAvBC,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAClCC,EACF,sBAAKR,UAAW,cAAhB,UACI,uBAAOA,UAAW,SAAUS,QAASH,EAArC,wBAGA,uBAAON,UAAW,SAAUS,QAASF,EAArC,kBAGA,uBAAOP,UAAW,SAAUS,QAASJ,EAArC,sBAOR,OACI,qBAAKL,UAAW,qBAAhB,SACKQ,MCwDEE,MApEf,WAAsB,IAAD,EACSC,mBAAS,GADlB,mBACVZ,EADU,KACHa,EADG,OAEOD,mBAAS,GAFhB,mBAEVE,EAFU,KAEJC,EAFI,OAIuBH,mBAAS,IAJhC,mBAIVI,EAJU,KAIIC,EAJJ,OAKaL,oBAAS,GALtB,mBAKVM,EALU,KAKDC,EALC,KAmDjB,OACI,qBAAKlB,UAAW,UAAhB,SACI,qBAAKA,UAAW,UAAhB,SACI,sBAAKA,UAAW,YAAhB,UACI,cAAC,EAAD,CAAOD,MAAOA,GAAgBc,IAC9B,cAAC,EAAD,CACIR,YAjBG,WACfU,GACAA,EAAaI,cAGjB,IAAMC,EAAoBC,YA/CpB,KA+CoCC,WAAU,SAACC,GACjDX,EAASW,MAEbP,EAAgBI,IAUAd,YAnDG,WACnB,GAAKS,EAQDA,EAAaI,cACbP,EAAS,GACTE,EAAQ,GACRE,EAAgB,QAXD,CACf,IAAMI,EAAoBC,YAXxB,KAYGG,KAAKC,aAAI,SAACF,GAAD,OAAOA,EAAI,MACpBD,WAAU,SAACC,GACRX,EAASW,EAAIV,MAErBG,EAAgBI,KA6CJb,YApCE,SAACmB,GACnB,GAAIT,EAAS,CACTC,GAAW,GACX,IAAMS,EAAgBC,YAAW,WAC7BV,GAAW,GACXW,aAAaF,KACd,UAECZ,GACAA,EAAaI,cAGjBL,EAAQf,GACRiB,EAAgB,eCjCbc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.22243b07.chunk.js","sourcesContent":["import './Timer.css';\r\nimport React from 'react';\r\n\r\n\r\nconst Timer = ({timer}) => {\r\n\r\n    return (\r\n        <div className={\"stopWatch__numbers\"}>\r\n            <span className=\"digits\">\r\n        {(\"0\" + Math.floor((timer / 3600) % 60)).slice(-2)}:\r\n            </span>\r\n            <span className=\"digits\">\r\n        {(\"0\" + Math.floor((timer / 60) % 60)).slice(-2)}:\r\n            </span>\r\n            <span className=\"digits\">\r\n        {(\"0\" + Math.floor(timer  % 60)).slice(-2)}.\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","import './Buttons.css';\r\nimport React from 'react';\r\n\r\nconst Buttons = ({handleReset, toggleStart, doubleClick}) => {\r\n    const ButtonGroup = (\r\n        <div className={\"buttonGroup\"}>\r\n            <label className={\"button\"} onClick={toggleStart}>\r\n                Start/Stop\r\n            </label>\r\n            <label className={\"button\"} onClick={doubleClick}>\r\n                Wait\r\n            </label>\r\n            <label className={\"button\"} onClick={handleReset}>\r\n                Reset\r\n            </label>\r\n        </div>\r\n    );\r\n\r\n\r\n    return (\r\n        <div className={\"stopWatch__buttons\"}>\r\n            {ButtonGroup}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import {useState} from \"react\";\nimport Timer from \"./Components/Timer\";\nimport {interval} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport \"./App.css\";\nimport Buttons from \"./Components/Buttons\";\n\nconst delay = 1000;\n\nfunction StopWatch() {\n    const [timer, setTimer] = useState(0);\n    const [diff, setDiff] = useState(0);\n\n    const [subscription, setSubscription] = useState(\"\");\n    const [prevent, setPrevent] = useState(true);\n\n    const onStartHandler = () => {\n        if (!subscription) {\n            const timerSubscription = interval(delay)\n                .pipe(map((v) => v + 1))\n                .subscribe((v) => {\n                    setTimer(v + diff);\n                });\n            setSubscription(timerSubscription);\n        } else {\n            subscription.unsubscribe();\n            setTimer(0);\n            setDiff(0);\n            setSubscription(\"\");\n        }\n    };\n\n    const onWaitHandler = (event) => {\n        if (prevent) {\n            setPrevent(false);\n            const timerInstance = setTimeout(function () {\n                setPrevent(true);\n                clearTimeout(timerInstance);\n            }, 300);\n        } else {\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n\n            setDiff(timer);\n            setSubscription(\"\");\n        }\n    };\n\n    const onResetHandler = () => {\n        if (subscription) {\n            subscription.unsubscribe();\n        }\n\n        const timerSubscription = interval(delay).subscribe((v) => {\n            setTimer(v);\n        });\n        setSubscription(timerSubscription);\n    };\n\n    return (\n        <div className={\"wrapper\"}>\n            <div className={\"content\"}>\n                <div className={\"stopWatch\"}>\n                    <Timer timer={timer ? timer : diff}/>\n                    <Buttons\n                        handleReset={onResetHandler}\n                        toggleStart={onStartHandler}\n                        doubleClick={onWaitHandler}\n                    />\n\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default StopWatch;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}